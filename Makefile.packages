VERSION := $(shell cat VERSION)
export WORKDIR ?= /highctidh
export SOURCE_DATE_EPOCH := $(shell git log -1 --pretty=%ct)
ARCH := $(shell uname -m)
.PHONY: deb wheel test packages sdist pypi-upload prepare-artefacts-for-upload
DEB_NAME := ${WORKDIR}/deb_dist/python3-highctidh_${VERSION}-1_${ARCH}.deb
WHEEL_NAME := ${WORKDIR}/dist/highctidh-${VERSION}-cp311-cp311-linux_${ARCH}.whl
SDIST_GZ := ${WORKDIR}/dist/highctidh-${VERSION}.tar.gz

version:
	echo ${VERSION}

deb: ${SDIST_GZ} ${DEB_NAME}
${DEB_NAME}:
	python3 setup.py --command-packages=stdeb.command sdist_dsc --compat=10 --dist-dir=${WORKDIR}/dist/ --use-premade-distfile=${SDIST_GZ}
	cp ${WORKDIR}/misc/debian-rules ${WORKDIR}/dist/highctidh-$(VERSION)/debian/rules
	cd ${WORKDIR}/dist/highctidh-$(VERSION) && CC=${CC} dpkg-buildpackage -rfakeroot -uc -us

wheel: ${SDIST_GZ} ${WHEEL_NAME}
${WHEEL_NAME}:
	SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH} python3 -m build --wheel
	-ls -alh ${WHEEL_NAME}
	-sha256sum ${WHEEL_NAME}

test:
	python3 setup.py test

sdist: ${SDIST_GZ}
${SDIST_GZ}:
	SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH} flit build --format sdist
	-ls -alh ${SDIST_GZ}
	-sha256sum ${SDIST_GZ}

sdist-non-deterministic: ${SDIST_GZ}
${SDIST_GZ}:
	SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH} python3 setup.py sdist
	ls -alh ${SDIST_GZ}
	sha256sum ${SDIST_GZ}

packages: wheel deb
	echo "Finished building deb and wheel targets for ${ARCH}"
	find .|grep .whl$
	find .|grep .deb$

docker-setup-multiarch:
	echo "Please run ./docker-priv-setup.sh as root to prepare the system"
	./docker-setup.sh

docker-clean:
	./docker-clean.sh

# NOTE:
#   twine accepts our whl files but pypi does not due to not using the
#   `manywheels` docker trusting trust container
pypi-upload:
	python3 -m twine check ${WORKDIR}/docker_build_output/upload/*$(VERSION)*.tar.gz
	python3 -m twine upload --repository pypi ${WORKDIR}/docker_build_output/upload/*$(VERSION)*.tar.gz

prepare-artefacts-for-upload:
	mkdir -p ${WORKDIR}/docker_build_output/upload/build-artefacts;
	for arch in $(shell ls -1  ${WORKDIR}/docker_build_output |grep -v upload); do \
		echo "Copying deb and whl builds..."; \
		cp -v ${WORKDIR}/docker_build_output/$$arch/dist/*.deb \
			${WORKDIR}/docker_build_output/upload/build-artefacts/ && \
		cp -v ${WORKDIR}/docker_build_output/$$arch/dist/*.whl \
			${WORKDIR}/docker_build_output/upload/build-artefacts/; \
	done
	for arch in $(shell ls -1  ${WORKDIR}/docker_build_output |grep -v upload); do \
		cd ${WORKDIR}/docker_build_output/$$arch/dist/ && \
		echo "Creating $$arch artefact tar.gz..." && \
		tar -cvzf \
		highctidh_1.0.2023112000-$$arch-src.tar.gz.new \
		*.buildinfo \
		*.changes \
		*.dsc \
		*.tar.gz \
		*.tar.xz && \
		mv -v highctidh_1.0.2023112000-$$arch-src.tar.gz.new \
			../../upload/build-artefacts/highctidh_1.0.2023112000-$$arch-src.tar.gz && \
		cd ../../../; \
	done

# This target calls the other targets present in this makefile from within a Docker container.
# Our use of QEMU means that the Docker container appears to be running on
# ${ARCH} regardless of the host CPU architecture.
multi-arch-build:
	./docker-multi-arch-package-build.sh
